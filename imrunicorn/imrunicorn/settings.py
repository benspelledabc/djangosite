"""
Django settings for imrunicorn project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import socket
import logging
import os
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'hmj=u6w0i830gw=k^l&vc*jsl!mvtx8#r%#con#lvz04aordkg'

if socket.gethostname().startswith('nifi') \
        or socket.gethostname().startswith('Thermaltake') \
        or socket.gethostname().startswith('svenMacBook'):
    DEBUG = True
    IS_PRODUCTION = not DEBUG
else:
    DEBUG = False
    IS_PRODUCTION = not DEBUG

ALLOWED_HOSTS = ['benspelledabc.me', 'localhost', '127.0.0.1', '*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'rest_framework',
    'crispy_forms',
    'imrunicorn',
    'loaddata',
    'farminvite',
    'announcements',
    'polls',
    'shooting_logbook',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'imrunicorn.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'imrunicorn.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

if socket.gethostname().startswith('svenMacBook')\
        or socket.gethostname().startswith('Thermaltake'):
    DATABASES = {
         'default': {
             'ENGINE': 'django.db.backends.sqlite3',
             'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
         },
    }
else:
    DATABASES = {
         'default': {
            'ENGINE': 'django.db.backends.mysql',
            'OPTIONS': {
                'read_default_file': '/opt/loaddata.cnf',
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            },
         }
    }


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
# TIME_ZONE = 'UTC'
TIME_ZONE = 'America/New_York'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# Default permission for all the rest framework things
# restrict to authenticated only
# there is a read only unless authenticated, i might consider
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.IsAuthenticated',
        # 'rest_framework.permissions.AllowAny',
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 5
}

# adding ability to send email via gmail
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = 'svendavison@gmail.com'
# noinspection PyInterpreter
EMAIL_HOST_PASSWORD = 'redacted'
# EMAIL_HOST_PASSWORD = env.str('GMAIL_PASS')


STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

CRISPY_TEMPLATE_PACK = 'bootstrap4'


# %(threadName)-14s (%(pathname)s:%(lineno)d)
CONFIG_BASE_FILE = os.path.dirname(__file__)
# CONSOLE_LOGGING_FORMAT = '%(hostname)s %(asctime)s %(levelname)-8s %(name)s.%(funcName)s: %(message)s'
CONSOLE_LOGGING_FORMAT = '%(asctime)s %(levelname)-8s %(name)s.%(funcName)s: %(message)s'
CONSOLE_LOGGING_FILE_LOCATION = os.path.join(CONFIG_BASE_FILE.split(f'config{os.sep}settings')[0], 'django-wrds.log')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'ignore_something': {
            '()': 'imrunicorn.logging_helpers.SomethingFilter',
        },
    },
    'formatters': {
        'my_formatter': {
            'format': CONSOLE_LOGGING_FORMAT,
            'class': 'imrunicorn.logging_helpers.HostnameAddingFormatter',
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false', 'ignore_something', ],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'my_formatter',
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': CONSOLE_LOGGING_FILE_LOCATION,
            'mode': 'a',
            'encoding': 'utf-8',
            'formatter': 'my_formatter',
            'backupCount': 5,
            'maxBytes': 10485760,
        },
    },
    'loggers': {
        '': {
            # The root logger is always defined as an empty string and will pick up all logging that is not collected
            # by a more specific logger below
            'handlers': ['console', 'mail_admins', 'file'],
            'level': os.getenv('ROOT_LOG_LEVEL', 'INFO'),
        },
        'django': {
            # The 'django' logger is configured by Django out of the box. Here, it is reconfigured in order to
            # utilize the file logger and allow configuration at runtime
            'handlers': ['console', 'mail_admins', 'file'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'django.server': {
            'propagate': True,
        },
        'django.security.DisallowedHost': {
            'propagate': False,
            'level': 'ERROR',
        },
        'django.db.backends': {
            'handlers': ['console'],
            # 'level': 'DEBUG',
            'level': 'WARNING',
        },
    },
}


def exception_hook(type, value, traceback):
    """
    Function to redirect uncaught exceptions to the logger.
    See https://docs.python.org/3.7/library/sys.html#sys.excepthook for more.
    :param type: Type of the exception
    :param value: The exception
    :param traceback: What was happening as a Traceback object
    """
    logging.getLogger('*excepthook*').critical(f'Uncaught Exception!', exc_info=(type, value, traceback))


# The function assigned to sys.excepthook is called only just before control is returned to the prompt; in a Python
# program this happens just before the program exits.
sys.excepthook = exception_hook